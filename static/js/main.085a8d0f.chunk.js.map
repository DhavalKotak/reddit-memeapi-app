{"version":3,"sources":["assets/reddit.png","components/Header.js","components/Layout.js","components/Meme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","state","Jumbotron","fluid","src","user","className","alt","Component","Layout","props","Container","children","Meme","imgUrl","title","loading","fetchMeme","bind","this","setState","fetch","then","response","json","data","url","Button","onClick","Spinner","animation","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,oC,kMCmB5BC,E,kDAdX,aAAe,IAAD,8BACV,gBACKC,MAAQ,GAFH,E,qDAKV,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,yBAAKC,IAAKC,IAAMC,UAAU,OAAOC,IAAI,KACrC,mDAA4B,kC,GATvBC,a,QCDRC,EAAS,SAACC,GAAD,OACnB,kBAACC,EAAA,EAAD,KACKD,EAAME,W,uBCyCCC,E,kDAxCX,aAAe,IAAD,8BACV,gBACKZ,MAAQ,CACTa,OAAQ,GACRC,MAAO,GACPC,SAAS,GAEb,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAPP,E,wDAUD,IAAD,OACRC,KAAKC,SAAS,CAACJ,SAAS,IACxBK,MAAM,wCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKL,SAAS,CACVN,OAASW,EAAKC,IACdX,MAAOU,EAAKV,MACZC,SAAS,S,+BAMrB,OACA,kBAACL,EAAA,EAAD,CAAWR,OAAK,GACZ,kBAACwB,EAAA,EAAD,CAAQC,QAAST,KAAKF,UAAWX,UAAU,eAA3C,YAA0E,6BAAK,6BAC9Ea,KAAKlB,MAAMe,QACZ,6BACI,6BAAK,6BAAK,6BACV,kBAACa,EAAA,EAAD,CAASC,UAAU,OAAOC,QAAQ,aAEtC,6BACI,4BAAKZ,KAAKlB,MAAMc,OAChB,yBAAKX,IAAKe,KAAKlB,MAAMa,OAAQP,IAAI,W,GAnC9BC,aCaJwB,E,uKAXX,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,Y,GANQxB,aCOEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.085a8d0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reddit.bf06dcc3.png\";","import React, { Component } from 'react'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport user from './../assets/reddit.png'\r\n\r\nclass Header extends Component{\r\n    constructor() {\r\n        super()\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        return (\r\n            <Jumbotron fluid>\r\n                <img src={user} className=\"logo\" alt=\"\"/>\r\n                <h1>Reddit Meme API App</h1><br/>\r\n            </Jumbotron>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nexport const Layout = (props) => (\r\n   <Container>\r\n       {props.children}\r\n   </Container> \r\n)","import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nclass Meme extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            imgUrl: \"\",\r\n            title: \"\",\r\n            loading: false\r\n        }\r\n        this.fetchMeme = this.fetchMeme.bind(this)\r\n    }\r\n\r\n    fetchMeme() {\r\n        this.setState({loading: true})\r\n        fetch(\"https://meme-api.herokuapp.com/gimme\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    imgUrl : data.url,\r\n                    title: data.title,\r\n                    loading: false\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <Container fluid>\r\n            <Button onClick={this.fetchMeme} className=\"fetchButton\">Get Meme</Button><br/><br/>\r\n            {this.state.loading ? \r\n            <div>\r\n                <br/><br/><br/>\r\n                <Spinner animation=\"grow\" variant=\"warning\" />\r\n            </div> :\r\n            <div>\r\n                <h4>{this.state.title}</h4> \r\n                <img src={this.state.imgUrl} alt=\"\"/> \r\n            </div>}\r\n        </Container>\r\n        )\r\n    }\r\n}\r\nexport default Meme","import React, { Component } from 'react';\nimport Header from './components/Header'\nimport { Layout } from './components/Layout'\nimport Meme from './components/Meme'\n\nclass App extends Component{\n  render() {\n    return (\n      <>\n        <Header />\n        <Layout>\n          <Meme />\n        </Layout>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}